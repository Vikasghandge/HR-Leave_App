pipeline {
    agent any
    tools {
        maven 'Maven'
        jdk 'JDK17'
    }

    environment {
        AWS_REGION = 'ap-south-1'
        CLUSTER_NAME = 'my-eks'
        NAMESPACE = 'leave-management'
        IMAGE_NAME = 'ghandgevikas/leave-management'
        DOCKER_TAG = 'latest'
    }

    stages {
        stage('Build Maven Project') {
            steps {
                dir('leave-app-kastro-master') {
                    sh 'mvn clean install -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('leave-app-kastro-master') {
                    script {
                        sh "docker build -t ${IMAGE_NAME}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        sh """
                            echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                            docker push ${IMAGE_NAME}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Configure AWS EKS Access') {
            steps {
                withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set region $AWS_REGION
                            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
                            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            kubectl config set-context --current --namespace=${NAMESPACE}
                            kubectl cluster-info
                            kubectl get nodes
                        """
                    }
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                dir('leave-app-kastro-master/k8s') {
                    script {
                        sh "kubectl apply -f ebs-sc.yml -n ${NAMESPACE}"
                        sh "kubectl apply -f mysql-pv.yml -n ${NAMESPACE}"
                        sh "kubectl apply -f mysql-deployment.yml -n ${NAMESPACE}"
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                dir('leave-app-kastro-master/k8s') {
                    script {
                        sh "kubectl apply -f deployment.yml -n ${NAMESPACE}"
                        sh "kubectl apply -f service.yml -n ${NAMESPACE}"
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                sh "kubectl get pods -n ${NAMESPACE}"
                sh "kubectl get svc -n ${NAMESPACE}"
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
            script {
                sh 'mkdir -p k8s-logs'
                sh 'kubectl get all -n ${NAMESPACE} > k8s-logs/failure.log || true'
            }
        }
    }
}

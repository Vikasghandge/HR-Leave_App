pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        DOCKER_HUB_CREDS = credentials('docker-creds')
        DOCKER_IMAGE = "ghandgevikas/leave-management"
        DOCKER_TAG = "${BUILD_NUMBER}"
        APP_DIR = "leave-app-kastro-master"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Git Clone') {
            steps {
                git branch: 'dev', 
                url: 'https://github.com/Vikasghandge/HR-Leave_App.git',
                poll: false
            }
        }

        stage('Build Project') {
            steps {
                dir("${APP_DIR}") {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Prepare Docker Assets') {
            steps {
                dir("${APP_DIR}") {
                    sh '''
                    wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -O wait-for-it.sh
                    sed -i '1s|^.*$|#!/usr/bin/env bash|' wait-for-it.sh
                    sed -i 's/\r$//' wait-for-it.sh
                    chmod +x wait-for-it.sh
                    '''
                }
            }
        }

        stage('Create Docker Image') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                    docker build --no-cache -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-creds', 
                    usernameVariable: 'DOCKER_USER', 
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                    echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Clean Old Deployment') {
            steps {
                dir("${APP_DIR}") {
                    sh '''
                    docker compose down --rmi all --volumes --remove-orphans || true
                    docker system prune -af || true
                    '''
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                    # First build the image locally to ensure it exists
                    docker compose build --no-cache
                    
                    # Then deploy without pulling
                    DOCKER_TAG=${DOCKER_TAG} docker compose up -d --force-recreate
                    
                    # Wait for services to start
                    sleep 15
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                dir("${APP_DIR}") {
                    sh '''
                    docker ps -a
                    docker logs leave-management-app --tail 50
                    curl -I http://localhost:8090/actuator/health || true
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            emailext body: 'Build ${BUILD_NUMBER} failed. Please check Jenkins for details.', 
                    subject: 'Jenkins Build Failed: ${JOB_NAME} #${BUILD_NUMBER}',
                    to: 'ghandgevikas804@gmail.com'
        }
    }
}
